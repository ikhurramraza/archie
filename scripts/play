#!/usr/bin/bash

set -euo pipefail

# ============================================================================ #
# ================================ CONSTANTS ================================= #
# ============================================================================ #

# ============================= Player constants ============================= #

: "${IMAGE_PLAYER:=sxiv -a}"
: "${VIDEO_PLAYER:=mpv --really-quiet --loop=inf}"

if [[ "$DESKTOP_SESSION" != "gnome" ]]; then
  GIF_PLAYER="devour $GIF_PLAYER"
  IMAGE_PLAYER="devour $IMAGE_PLAYER"
  VIDEO_PLAYER="devour $VIDEO_PLAYER"
fi

# ============================= Option defaults ============================== #

: "${PLAY_ONLY:=all}"
: "${PLAY_ORDER:=normal}"

# ============================================================================ #
# ============================== HELPER METHODS ============================== #
# ============================================================================ #

help() {
  cat <<HELP
Usage: $(basename $0) [OPTIONS] TYPE PATH

Play media using defined programs.

Arguments:
  TYPE        Type of files to play (i[mages], v[ideos])
  PATH        Path to file or directory

Options:
  --order     Files ordering (default: normal)
              Possible values: random, size, normal
HELP
}

exit_with_error() {
  echo "$1" 1>&2
  exit 1
}

# ============================================================================ #
# ================================= FUNCTIONS ================================ #
# ============================================================================ #

files() {
  local find_opts=""

  case "$PLAY_TYPE" in
  v | videos) find_opts="-iregex .*\.\(mp4\|mov\|webm\)$" ;;
  i | images) find_opts="-iregex .*\.\(jpg\|jpeg\|png\|webp\|gif\)$" ;;
  *) exit_with_error "Unknown type: $type" ;;
  esac

  local find_command="find $PLAY_DIRECTORY -type f $find_opts -print0"

  case "$PLAY_ORDER" in
  normal) $find_command ;;
  random) $find_command | sort -R ;;
  size) $find_command -printf '%s\t%p\n' | sort -r -n | cut -f2- ;;
  *) exit_with_error "Unknown --order value." ;;
  esac
}

# ============================================================================ #
# ============================= ARGUMENT PARSING ============================= #
# ============================================================================ #

for option in "$@"; do
  case "$option" in
  --order=*)
    PLAY_ORDER="${1#*=}"
    shift
    ;;
  --*)
    exit_with_error "Unknown option: ${1%%=*}"
    ;;
  esac
done

PLAY_TYPE="$1"
PLAY_DIRECTORY="$2"

# ============================================================================ #
# ================================ ENTRYPOINT ================================ #
# ============================================================================ #

case "$PLAY_TYPE" in
i | images) PLAYER="$IMAGE_PLAYER" ;;
v | videos) PLAYER="$VIDEO_PLAYER" ;;
*) exit_with_error "Unknown type: $type" ;;
esac

files | xargs -0 $PLAYER
