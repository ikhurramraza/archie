#!/usr/bin/bash

set -euo pipefail

# ============================================================================ #
# ================================ CONSTANTS ================================= #
# ============================================================================ #

IGNORE_FILE="$XDG_DATA_HOME/mark/ignore"
TAGS_FILE="$XDG_DATA_HOME/mark/tags"
DIRECTORY_DOWNLOADS="$HOME/Downloads"
DIRECTORY_KITRR="$XDG_DATA_HOME/4k/Kitrr"
DIRECTORY_REDRR="/mnt/Archive/Media/Redrr"
DIRECTORY_STOGRAM="$XDG_DATA_HOME/4k/4K Stogram"

# ============================================================================ #
# =============================== SUB COMMANDS =============================== #
# ============================================================================ #

# ============================== COMMAND: Help =============================== #

mark__help() {
  cat <<HELP
Usage: mark COMMAND

Commands:
  help            Show this help
  start           Start marking files in Kittr and Redrr
  copy            Copy tagged files to new location
  create          Move files to Kitrr
HELP
}

# ============================== COMMAND: Start ============================== #

mark__start() {
  local img_command vid_command
  local directories=("$DIRECTORY_DOWNLOADS" "$DIRECTORY_REDRR" "$DIRECTORY_KITRR")

  case "$DESKTOP_SESSION" in
  gnome)
    img_command="sxiv -a"
    vid_command="mpv --loop=inf --mute=yes"
    ;;
  *)
    img_command="devour sxiv -a"
    vid_command="devour mpv --loop=inf --mute=yes"
    ;;
  esac

  for directory in "${directories[@]}"; do
    cd "$directory" || exit 1
    marker mark "$img_command" "**/*.{jpeg,jpg,png,gif}"
    marker mark "$vid_command" "**/*.mp4"
  done
}

# ============================== COMMAND: Copy =============================== #

titlelize() {
  ruby -e "puts ARGV.first.split(/ |\_/).map(&:capitalize).join(' ')" "$1"
}

mark__copy() {
  local folder
  local directory

  while read -r tag; do
    folder="$(titlelize "$tag")"
    directory="/mnt/Archive/Media/FontKit/$folder"

    [[ ! -d "$directory" ]] && mkdir -p "$directory"

    marker list "$tag" | xargs --no-run-if-empty -I{} cp "{}" "$directory"
    marker list "$tag" | xargs --no-run-if-empty -I{} -n1 basename "{}" >>"$IGNORE_FILE"
    marker list "$tag" | xargs --no-run-if-empty -I{} rm "{}"
  done < <(comm -12 <(sort "$TAGS_FILE") <(marker stats | awk '{print $1}' | sort))

  marker list d | xargs --no-run-if-empty -I{} -n1 basename "{}" >>"$IGNORE_FILE"
  marker list d | xargs --no-run-if-empty -I{} rm "{}"
}

# ============================= COMMAND: Create ============================== #

mark__create() {
  while read -r filepath; do
    [[ "$filepath" =~ "thumb|sqlite" ]] && continue

    local filename="$(basename "$filepath")"
    local extension="${filename##*.}"
    local filename_wo_extention="${filename%.*}"
    local suffix="$(sha1sum "$filepath" | head -c5)"
    local new_filename="${filename_wo_extention##* }_${suffix}.${extension}"
    local new_filepath="$DIRECTORY_KITRR/$new_filename"

    [[ -f "$new_filepath" ]] && continue
    grep -Fxq "$new_filename" "$IGNORE_FILE" && continue

    cp "$filepath" "$new_filepath"
  done < <(find "$DIRECTORY_STOGRAM" -type f)
}

# ============================================================================ #
# ================================ ENTRYPOINT ================================ #
# ============================================================================ #

if [[ $# -eq 0 ]]; then
  mark__help
  exit 1
else
  for subcommand in "$@"; do
    case "$subcommand" in
    create | start | copy)
      "mark__$subcommand"
      ;;
    clean | stats | undo)
      marker "$subcommand"
      ;;
    esac
  done
fi
