#!/usr/bin/bash

set -euo pipefail

# ============================================================================ #
# ================================ CONSTANTS ================================= #
# ============================================================================ #

IGNORE_FILE="$XDG_DATA_HOME/mark/ignore"
TAGS_FILE="$XDG_DATA_HOME/mark/tags"
DIRECTORY_DOWNLOADS="$HOME/Downloads"
DIRECTORY_KITRR="$XDG_DATA_HOME/4k/Kitrr"
DIRECTORY_REDRR="/mnt/Archive/Media/Redrr"
DIRECTORY_STOGRAM="$XDG_DATA_HOME/4k/4K Stogram"
DIRECTORY_FONTKIT="/mnt/Archive/Media/FontKit"

# ============================================================================ #
# ============================== HELPER METHODS ============================== #
# ============================================================================ #

exit_with_error() {
  echo "$1" 1>&2
  exit 1
}

command_available() {
  command -v "$1" >/dev/null 2>&1 || exit_with_error "Please make sure $1 is installed."
}

# ============================================================================ #
# =============================== SUB COMMANDS =============================== #
# ============================================================================ #

# ============================== COMMAND: Help =============================== #

mark__help() {
  cat <<HELP
Usage: mark COMMAND

Commands:
  help            Show this help
  start           Start marking files in Kittr and Redrr
  copy            Copy tagged files to new location
  create          Move files to Kitrr
  optimize        Optimize today's files in FontKit directory
HELP
}

# ============================== COMMAND: Start ============================== #

mark__start() {
  local img_command vid_command

  case "$DESKTOP_SESSION" in
  gnome)
    img_command="sxiv -a"
    vid_command="mpv --loop=inf --mute=yes"
    ;;
  *)
    img_command="devour sxiv -a"
    vid_command="devour mpv --loop=inf --mute=yes"
    ;;
  esac

  cd "$DIRECTORY_DOWNLOADS" || exit 1
  marker mark "$img_command" "*.{jpeg,jpg,png,gif,JPEG,JPG,PNG,GIF}"
  marker mark "$vid_command" "*.{mp4,webm}"

  cd "$DIRECTORY_REDRR" || exit 1
  marker mark "$img_command" "**/*.{jpeg,jpg,png,gif,JPEG,JPG,PNG,GIF}"
  marker mark "$vid_command" "**/*.mp4"

  cd "$DIRECTORY_KITRR" || exit 1
  marker mark "$img_command" "**/*.{jpeg,jpg,png,gif,JPEG,JPG,PNG,GIF}"
  marker mark "$vid_command" "**/*.mp4"
}

# ============================== COMMAND: Copy =============================== #

titlelize() {
  ruby -e "puts ARGV.first.split(/ |\_/).map(&:capitalize).join(' ')" "$1"
}

mark__copy() {
  local folder
  local directory

  while read -r tag; do
    folder="$(titlelize "$tag")"
    directory="$DIRECTORY_FONTKIT/$folder"

    [[ ! -d "$directory" ]] && mkdir -p "$directory"

    marker list "$tag" | xargs --no-run-if-empty -I{} cp "{}" "$directory"
    marker list "$tag" | xargs --no-run-if-empty -I{} -n1 basename "{}" >>"$IGNORE_FILE"
    marker list "$tag" | xargs --no-run-if-empty -I{} rm "{}"
  done < <(comm -12 <(sort "$TAGS_FILE") <(marker stats | awk '{print $1}' | sort))

  marker list d | xargs --no-run-if-empty -I{} -n1 basename "{}" >>"$IGNORE_FILE"
  marker list d | xargs --no-run-if-empty -I{} rm "{}"
}

# ============================= COMMAND: Create ============================== #

mark__create() {
  while read -r filepath; do
    [[ "$filepath" =~ thumb|sqlite ]] && continue

    local filename="$(basename "$filepath")"
    local extension="${filename##*.}"
    local filename_wo_extention="${filename%.*}"
    local suffix="$(sha1sum "$filepath" | head -c5)"
    local new_filename="${filename_wo_extention##* }_${suffix}.${extension}"
    local new_filepath="$DIRECTORY_KITRR/$new_filename"

    [[ -f "$new_filepath" ]] && continue
    grep -Fxq "$new_filename" "$IGNORE_FILE" && continue

    cp "$filepath" "$new_filepath"
  done < <(find "$DIRECTORY_STOGRAM" -type f)
}

# ============================ COMMAND: Optimize ============================= #

mark__optimize() {
  command_available fd
  command_available mize

  fd . "$DIRECTORY_FONTKIT" --changed-within=1d --type=f | xargs mize
}

# ============================================================================ #
# ================================ ENTRYPOINT ================================ #
# ============================================================================ #

if [[ $# -eq 0 ]]; then
  mark__help
  exit 1
else
  for subcommand in "$@"; do
    SECONDS=0

    case "$subcommand" in
    create | start | copy | optimize)
      "mark__$subcommand"
      ;;
    clean | stats | undo)
      marker "$subcommand"
      ;;
    esac

    echo "Ran $subcommand in $SECONDS seconds"
  done
fi
