#!/usr/bin/env bash

set -eo pipefail

# ============================================================================ #
# ================================= HELPERS ================================== #
# ============================================================================ #

help() {
  cat <<HELP
Usage: $(basename $0) [OPTIONS] FILE

Converts gif to mp4 using ffmpeg

Arguments:
  FILE     Path of the gif file

Options:
  --rm     Remove gif file after converting
  --show   Show before and after (uses sxiv and mpv)
  --quiet  Make console output less verbose
HELP
}

exit_with_error() {
  echo "$1" 1>&2
  exit 1
}

# ============================================================================ #
# ================================= FUNCTIONS ================================ #
# ============================================================================ #

convert() {
  local gif="$1"
  local mp4="$2"

  ffmpeg \
    -i "$gif" \
    -movflags faststart \
    -pix_fmt yuv420p \
    -vf "scale=trunc(iw/2)*2:trunc(ih/2)*2" \
    "$mp4" >/dev/null 2>&1
}

stats() {
  [[ "$quiet" = 1 ]] && return

  local gif="$1"
  local mp4="$2"

  gif_size="$(du -h "$gif" | cut -f1)"
  mp4_size="$(du -h "$mp4" | cut -f1)"

  echo "Gif: $gif ($gif_size)"
  echo "Mp4: $mp4 ($mp4_size)"
}

show() {
  [[ ! "$should_show" = 1 ]] && return

  local gif="$1"
  local mp4="$2"

  sxiv -a "$gif"
  mpv --really-quiet --loop=inf "$mp4"
}

remove() {
  local gif="$1"

  if [[ "$should_remove" = 1 ]]; then
    rm "$gif"
    return
  elif [[ "$should_show" = 1 ]]; then
    read -p "Do you wish to keep the original? (y/N) " -r
    [[ ! $REPLY =~ [yY]$ ]] && rm "$gif"
  fi
}

# ============================================================================ #
# ============================= ARGUMENT PARSING ============================= #
# ============================================================================ #

if [ $# -lt 1 ]; then
  help
  exit 1
fi

should_show=0
should_remove=0

for option in "$@"; do
  case "$option" in
  --show)
    should_show=1
    shift
    ;;
  --quiet)
    quiet=1
    shift
    ;;
  --rm)
    should_remove=1
    shift
    ;;
  *)
    break
    ;;
  esac
done

# ============================================================================ #
# ================================ ENTRYPOINT ================================ #
# ============================================================================ #

for file in "$@"; do
  gif="$(realpath "$file")"
  mp4="${gif%%.*}.mp4"

  [[ -f "$gif" ]] || exit_with_error "File not found: $gif"
  [[ -f "$mp4" ]] && exit_with_error "File already exists: $mp4"

  convert "$gif" "$mp4"
  stats "$gif" "$mp4"
  show "$gif" "$mp4"
  remove "$gif" "$mp4"
done
